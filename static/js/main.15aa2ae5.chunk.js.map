{"version":3,"sources":["components/Titles.js","components/Form.js","components/Footer.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["TitleContainer","styled","section","_templateObject","Title","h1","_templateObject2","Text","p","_templateObject3","Titles","_ref","title","text","react_default","a","createElement","FormContainer","form","Form_templateObject","props","color","Input","input","Form_templateObject2","Submit","Form_templateObject3","Form","getWeather","onSubmit","type","name","placeholder","value","ContactInfo","footer","Footer_templateObject","IconContainer","div","Footer_templateObject2","Icon","Footer_templateObject3","Footer","href","target","fa","WeatherContainer","Weather_templateObject","ErrorMessage","Weather_templateObject2","Image","img","Weather_templateObject3","Weather","city","country","temperature","humidity","description","iconUrl","error","src","alt","Main","main","App_templateObject","Container","App_templateObject2","Info","App_templateObject3","API_KEY","App","state","undefined","icon","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","elements","fetch","concat","sent","json","_this","setState","temp","sys","weather","stop","components_Titles","components_Form","this","components_Weather","components_Footer","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"s2BAGA,IAAMA,EAAiBC,IAAOC,QAAVC,KAiBdC,EAAQH,IAAOI,GAAVC,KAILC,EAAON,IAAOO,EAAVC,KAYKC,EAPA,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,MAAOC,EAAVF,EAAUE,KAAV,OACbC,EAAAC,EAAAC,cAAChB,EAAD,KACEc,EAAAC,EAAAC,cAACZ,EAAD,KAAQQ,GACRE,EAAAC,EAAAC,cAACT,EAAD,KAAOM,ymBC7BX,IAAMI,EAAgBhB,IAAOiB,KAAVC,IACG,SAAAC,GAAK,OAAIA,EAAMC,QAQ/BC,EAAQrB,IAAOsB,MAAVC,KAQLC,EAASxB,IAAOsB,MAAVG,KA8BGC,EAnBF,SAAAhB,GAAA,IAAGiB,EAAHjB,EAAGiB,WAAH,OACXd,EAAAC,EAAAC,cAACC,EAAD,CAAeY,SAAUD,GACvBd,EAAAC,EAAAC,cAACM,EAAD,CACEQ,KAAK,OACLC,KAAK,OACLC,YAAY,YAEdlB,EAAAC,EAAAC,cAACM,EAAD,CACEQ,KAAK,OACLC,KAAK,UACLC,YAAY,eAEdlB,EAAAC,EAAAC,cAACS,EAAD,CACEK,KAAK,SACLG,MAAM,6mBCzCZ,IAAMC,EAAcjC,IAAOkC,OAAVC,KAeXC,EAAgBpC,IAAOqC,IAAVC,KAMbC,EAAOvC,IAAOc,EAAV0B,KAuBKC,EAjBA,kBACb5B,EAAAC,EAAAC,cAACkB,EAAD,KACEpB,EAAAC,EAAAC,cAAA,kDACAF,EAAAC,EAAAC,cAACqB,EAAD,KACEvB,EAAAC,EAAAC,cAACwB,EAAD,CAAMG,KAAK,iCAAiCC,OAAO,UAChD9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,OAEH/B,EAAAC,EAAAC,cAACwB,EAAD,CACEG,KAAK,oDACLC,OAAO,UAEN9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,8aCvCT,IAAMC,EAAmB7C,IAAOC,QAAV6C,KAMhBC,EAAe/C,IAAOO,EAAVyC,KAOZC,EAAQjD,IAAOkD,IAAVC,KAkCIC,EA5BC,SAAA1C,GAAA,IACd2C,EADc3C,EACd2C,KACAC,EAFc5C,EAEd4C,QACAC,EAHc7C,EAGd6C,YACAC,EAJc9C,EAId8C,SACAC,EALc/C,EAKd+C,YACAC,EANchD,EAMdgD,QACAC,EAPcjD,EAOdiD,MAPc,OASd9C,EAAAC,EAAAC,cAAC8B,EAAD,KACGQ,GAAQC,GACPzC,EAAAC,EAAAC,cAAA,sBACasC,EADb,KACqBC,GAGtBC,GAAe1C,EAAAC,EAAAC,cAAA,yBAAiBwC,EAAjB,SACfC,GAAY3C,EAAAC,EAAAC,cAAA,sBAAcyC,EAAd,MACZC,GAAe5C,EAAAC,EAAAC,cAAA,wBAAgB0C,GAC9BC,GACA7C,EAAAC,EAAAC,cAACkC,EAAD,CACEW,IAAKF,EACLG,IAAI,KAGPF,GAAS9C,EAAAC,EAAAC,cAACgC,EAAD,KAAeY,y3BCtC7B,IAAMG,EAAO9D,IAAO+D,KAAVC,KAWJC,EAAYjE,IAAOqC,IAAV6B,KAiBTC,EAAOnE,IAAOqC,IAAV+B,IAGY,SAAAjD,GAAK,OAAIA,EAAMC,QAS/BiD,EAAU,mCA0EDC,6MAvEbC,MAAQ,CACNhB,iBAAaiB,EACbnB,UAAMmB,EACNlB,aAASkB,EACThB,cAAUgB,EACVf,iBAAae,EACbC,UAAMD,EACNb,WAAOa,KAGT7C,iDAAa,SAAA+C,EAAMC,GAAN,IAAAtB,EAAAC,EAAAsB,EAAAC,EAAA,OAAAC,EAAAhE,EAAAiE,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACXP,EAAEQ,iBACI9B,EAAOsB,EAAEhC,OAAOyC,SAAS/B,KAAKrB,MAC9BsB,EAAUqB,EAAEhC,OAAOyC,SAAS9B,QAAQtB,MAH/BgD,EAAAE,KAAA,EAIYG,MAAK,qDAAAC,OAC2BjC,EAD3B,KAAAiC,OACmChC,EADnC,WAAAgC,OACoDjB,EADpD,kBAJjB,cAILO,EAJKI,EAAAO,KAAAP,EAAAE,KAAA,EAOQN,EAASY,OAPjB,OAOLX,EAPKG,EAAAO,KAQPlC,GAAQC,EAEVmC,EAAKC,SAAS,CACZnC,YAAasB,EAAKd,KAAK4B,KACvBtC,KAAMwB,EAAK/C,KACXwB,QAASuB,EAAKe,IAAItC,QAClBE,SAAUqB,EAAKd,KAAKP,SACpBC,YAAaoB,EAAKgB,QAAQ,GAAGpC,YAC7BgB,KAAMI,EAAKgB,QAAQ,GAAGpB,KACtBd,MAAO,KAGT8B,EAAKC,SAAS,CACZnC,iBAAaiB,EACbnB,UAAMmB,EACNlB,aAASkB,EACThB,cAAUgB,EACVf,iBAAae,EACbC,UAAMD,EACNb,MAAO,+BA3BA,yBAAAqB,EAAAc,SAAApB,oIAiCX,OACE7D,EAAAC,EAAAC,cAAC+C,EAAD,KACEjD,EAAAC,EAAAC,cAACkD,EAAD,KACEpD,EAAAC,EAAAC,cAACgF,EAAD,CACEpF,MAAM,kBACNC,KAAK,iDAEPC,EAAAC,EAAAC,cAACoD,EAAD,CAAM/C,MAAM,iBACVP,EAAAC,EAAAC,cAACiF,EAAD,CAAM5E,MAAM,gBAAgBO,WAAYsE,KAAKtE,aAC7Cd,EAAAC,EAAAC,cAACmF,EAAD,CACE3C,YAAa0C,KAAK1B,MAAMhB,YACxBF,KAAM4C,KAAK1B,MAAMlB,KACjBC,QAAS2C,KAAK1B,MAAMjB,QACpBE,SAAUyC,KAAK1B,MAAMf,SACrBC,YAAawC,KAAK1B,MAAMd,YACxBE,MAAOsC,KAAK1B,MAAMZ,MAClBD,QAAO,oCAAA4B,OACLW,KAAK1B,MAAME,KADN,YAMb5D,EAAAC,EAAAC,cAACoF,EAAD,cAlEUC,IAAMC,WCtCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/F,EAAAC,EAAAC,cAAC8F,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.15aa2ae5.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst TitleContainer = styled.section`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  background-color: black;\n  color: #fff;\n  text-align: center;\n\n  @media only screen and (min-width: 600px) {\n    width: 50%;\n    height: 30rem;\n    margin: auto;\n  }\n`;\n\nconst Title = styled.h1`\n  margin-top: 30px;\n`;\n\nconst Text = styled.p`\n  margin-bottom: 30px;\n  padding: 10px;\n`;\n\nconst Titles = ({ title, text }) => (\n  <TitleContainer>\n    <Title>{title}</Title>\n    <Text>{text}</Text>\n  </TitleContainer>\n);\n\nexport default Titles;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst FormContainer = styled.form`\n  background-color: ${props => props.color};\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  padding: 3rem;\n  height: 50%;\n`;\n\nconst Input = styled.input`\n  font-size: 1.2rem;\n  margin: 1rem;\n  border: none;\n  border-radius: 3px;\n  padding: 4px;\n`;\n\nconst Submit = styled.input`\n  background-color: black;\n  padding: 5px 15px;\n  border-radius: 3px;\n  color: white;\n  text-align: center;\n  align-self: center;\n  font-size: 1.2rem;\n  margin: 1rem;\n`;\n\nconst Form = ({ getWeather }) => (\n  <FormContainer onSubmit={getWeather}>\n    <Input\n      type=\"text\"\n      name=\"city\"\n      placeholder=\"City...\"\n    />\n    <Input\n      type=\"text\"\n      name=\"country\"\n      placeholder=\"Country...\"\n    />\n    <Submit\n      type=\"submit\"\n      value=\"Get Weather\"\n    />\n  </FormContainer>\n)\n\nexport default Form;","import React from \"react\";\nimport { FaGithub, FaLinkedin } from \"react-icons/fa\";\nimport styled from \"styled-components\";\n\nconst ContactInfo = styled.footer`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  text-align: center;\n  width: 100%;\n  background-color: #000;\n  color: #fff;\n\n  @media only screen and (min-width: 600px) {\n    background-color: snow;\n    color: #000;\n  }\n`;\n\nconst IconContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Icon = styled.a`\n  color: silver;\n  font-size: 2rem;\n  margin: 0 1rem;\n`;\n\nconst Footer = () => (\n  <ContactInfo>\n    <p>Page written by Marina Froes A. Costa</p>\n    <IconContainer>\n      <Icon href=\"https://github.com/MarinaFroes\" target=\"_blank\">\n        {<FaGithub />}\n      </Icon>\n      <Icon\n        href=\"https://www.linkedin.com/in/marina-froes-a-costa/\"\n        target=\"_blank\"\n      >\n        {<FaLinkedin />}\n      </Icon>\n    </IconContainer>\n  </ContactInfo>\n);\n\nexport default Footer;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst WeatherContainer = styled.section`\n  font-size: 1.1rem;\n  text-align: center;\n  height: 50%;\n`;\n\nconst ErrorMessage = styled.p`\n  background-color: white;\n  padding: 10px;\n  color: red;\n  font-weight: bold;\n`;\n\nconst Image = styled.img`\n  width: 60px;\n  align-self: center;\n  margin-bottom: 20px;\n`;\n\nconst Weather = ({\n  city,\n  country,\n  temperature,\n  humidity,\n  description,\n  iconUrl,\n  error\n}) => (\n  <WeatherContainer>\n    {city && country && (\n      <p>\n        Location: {city}, {country}\n      </p>\n    )}\n    {temperature && <p>Temperature: {temperature}Â°C</p>}\n    {humidity && <p>Humidity: {humidity}% </p>}\n    {description && <p>Conditions: {description}</p>}\n    { iconUrl && \n      <Image\n        src={iconUrl}\n        alt=\"\"\n      />\n    }\n    {error && <ErrorMessage>{error}</ErrorMessage>}\n  </WeatherContainer>\n);\n\nexport default Weather;\n","import React from \"react\";\nimport \"./App.css\";\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport Footer from \"./components/Footer.js\";\nimport Weather from \"./components/Weather\";\nimport styled from \"styled-components\";\n\nconst Main = styled.main`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  @media only screen and (min-width: 600px) {\n    background-color: snow;\n  }\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n\n  @media only screen and (min-width: 600px) {\n    flex-direction: row;\n    margin: 2rem;\n    justify-content: center;\n    align-items: center;\n    width: 35rem;\n    height: 30rem;\n    box-shadow: 3px 3px 10px grey;\n  }\n`;\n\nconst Info = styled.div`\n  display: flex;\n  flex-direction: column;\n  background-color: ${props => props.color};\n  height: 30rem;\n  width: 100%;\n\n  @media only screen and (min-width: 600px) {\n    width: 50%;\n  }\n`;\n\nconst API_KEY = \"f6d3ccc3be4411b42258113ccd95bfec\";\n\nclass App extends React.Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    icon: undefined,\n    error: undefined\n  };\n\n  getWeather = async e => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api_call = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`\n    );\n    const data = await api_call.json();\n    if (city && country) {\n      // console.log(data);\n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        icon: data.weather[0].icon,\n        error: \"\"\n      });\n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        icon: undefined,\n        error: \"Please enter valid values.\"\n      });\n    }\n  };\n\n  render() {\n    return (\n      <Main>\n        <Container>\n          <Titles\n            title=\"Weather Checker\"\n            text=\"Find out temperature, conditions and more...\"\n          />\n          <Info color=\"palevioletred\">\n            <Form color=\"palevioletred\" getWeather={this.getWeather} />\n            <Weather\n              temperature={this.state.temperature}\n              city={this.state.city}\n              country={this.state.country}\n              humidity={this.state.humidity}\n              description={this.state.description}\n              error={this.state.error}\n              iconUrl={`https://openweathermap.org/img/w/${\n                this.state.icon\n              }.png`}\n            />\n          </Info>\n        </Container>\n        <Footer />\n      </Main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}